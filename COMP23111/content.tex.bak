% Set the author and title of the compiled pdf
\hypersetup{
  pdftitle = {\Title},
  pdfauthor = {\Author}
}

\section{An introduction to Database Management Systems}

DataBase Management Systems (DBMS's) are a type of middleware that provide a
layer of abstraction for dealing with databases. It is nearly always unnecessary
to write software from scratch that interfaces with a database, since a lot of
database operations will share a significant amount of logic.

Henceforth, a lot of the functionality required of applications that make use of
a database is placed into a DBMS, which application developers can make use and
save time. The DBMS acts as a service, that is well implemented and is able to
enforce good practices and advanced techniques such as concurrency, sharding,
recovery management and transactions.

Some advantages of using a DBMS include:

\begin{itemize}
  \item It decouples data inside a database from the application using it.
        Either can be re-written at any time so long as they still provide/use
        the same interface.
  \item Since the data is decoupled from the application, using a DBMS (in
        theory) lowers the development cost of the application.
  \item Most DBMS are scalable, concurrent, fault tolerant, authorisation
        control (often role based for organisations).
\end{itemize}

Even though the DBMS aims to provide a layer of abstraction for a user
application, there are several layers of abstraction within the DBMS itself.
These are:

\begin{tabularx}{\textwidth}{>{\bfseries}l X}
  Physical & Deals with the file(s) that is written to the
             storage medium that will hold the database. Needs to know about
             file formats, indexing, compression, etc.\\
  Logical  & Mainly concerned with mapping the raw data into database
             `concepts' such as tables, views etc. It is here that the formal
             specification of the database is defined, commonly used models
             include \textit{relational, XML based and document based}\\
  View     & Ensures that only authorised people can view the data.\\
\end{tabularx}

If the database is using a relational format, then it will be defined by a
schema. A schema dictates how the database is formatted; what tables there are,
and what datatypes their columns take. An instance of a database is the content
(data) inside of the database at a particular point in time. There is a certain
isomorphism between relational databases and imperative programming languages; a
schema would be akin to the decleration of variables (i.e. their names and
types), while the instance would be their values at a particular point in the
program's execution.

Irrespective of what logical model a database uses, most DBMS use between one
and three languages to interface with a user/application. These are:

\begin{itemize}
  \item Data Definition Language - used for specifying schema.
  \item Data Manipulation Language - used for mutating the data in the database.
  \item Data Query Language - used to access data in the database.
\end{itemize}

Often DBMS languages will be both a DML and a DQL, and somtimes a DDL too! One
such example is SQL, does all of the above!
