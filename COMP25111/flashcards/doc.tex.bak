\documentclass[frontgrid]{flacards}
\usepackage{color}
\usepackage{tabularx}
\definecolor{light-gray}{gray}{0.75}

\newcommand{\frontcard}[1]{\textcolor{light-gray}{\colorbox{light-gray}{$#1$}}}
\newcommand{\backcard}[1]{#1} 

\newcommand{\flashcard}[1]{% create new command for cards with blanks
    \card{% call the original \card command with twice the same argument (#1)
        \let\blank\frontcard% but let \blank behave like \frontcard the first time
        #1
    }{%
        \let\blank\backcard% and like \backcard the second time
        #1
    }%
}

\begin{document}

\pagesetup{2}{4} 

\card{
	What happens when `LDA s' is run?
}{
	ACC = [s]
}

\card{
	What happens when `STA s' is run?
}{
	[s] = ACC
}

\card{
	What happens when `ADD s' is run?
}{
	ACC += [s]
}

\card{
	What happens when `SUB s' is run?
}{
	ACC -= [s]
}

\card{
	What happens when `JMP s' is run?
}{
	PC = s
}

\card{
	What happens when `JGE s' is run?
}{
	if ACC >= 0 then PC = s
}

\card{
	What happens when `JNE s' is run?
}{
	if ACC != 0 then PC = s
}

\card{
	What three steps occur during the fetch phase?
}{
	\begin{tabularx}{0.32\textwidth}{l X}
		1. & Use PC as address to read memory\\
		2. & Save result of read in CPU\\
		3. & Increment PCI read
	\end{tabularx}
}

\card{
	What control signals do all registers need?
}{
	An enable signal
}

\card{
	What control signal does a multiplexer need?
}{
	A signal to select an input
}

\card{
	What control signals does the memory need?
}{
	Ren (read enable) and Wen (write enable)
}

\card{
	Which 3 signals control the ALU?
}{
	add, sub \& byp
}

\card{
	What is a process?
}{
	A program in execution, the thread + address space.
}

\card{
	What is the address space?
}{
	All memory locations the process can use.
}

\card{
	What is a thread?
}{
	A sequence of instructions that are obeyed.
}

\card{
	What is multi-threading?
}{
	This is where we have multiple threads within the same process
}

\card{
	How do we make programs think they have sole use of memory?
}{
	Use \textbf{relocation}, where we swap a program out of memory and later swap it back in.
}

\card{
	What are the three different approaches to engineering an OS?
}{
	Monolithic, layered and micro-kernels.
}

\card{
	What are the three process states?
}{
	Running, ready, blocked
}

\card{
	In the diagram, what is happening at each stage?
}{
	\begin{tabularx}{0.32\textwidth}{l X}
		1. & Process need to wait for I/O or event.\\
		2. & Process forcibly preempted - \textbf{interrupt / relinquish CPU / time-slice expired}.\\
		3. & Scheduler selects process to run.\\
		4. & I/O or event occurs.\\
	\end{tabularx}
}

\card{
	What is a PCB table?
}{
	Process control block, it contains all of the information needed about processes.
}

\card{
	In scheduling, what do the following mean?
	\begin{tabularx}{0.32\textwidth}{l X}
		1. & CPU burst\\
		2. & I/O burst\\
		3. & CPU bound\\
		4. & I/O bound\\
	\end{tabularx}
}{
	\begin{tabularx}{0.32\textwidth}{l X}
		1. & Process executing on CPU\\
		2. & Process blocked, waiting for I/O\\
		3. & Long CPU bursts\\
		4. & Short CPU bursts\\
	\end{tabularx}
}

\card{
	What is a processes turnaround time?
}{
	The time from a process being submitted to it getting completed.
}

\card{
	What is a processes waiting time?
}{
	The time that the process waits to run.
}

\card{
	Briefly explain the first come first served scheduling algorithm.
}{
	The first process in the ready state gets CPU time first. Once it is blocked or complete, the next process in the queue is run. Processes that require CPU time are added to the back of the queue.
}

\card{
	What is meant by pre-emptive scheduling?	
}{
	Scheduling where processes run until they are terminated or blocked.
}

\card{
	What is meant by non-pre-emptive scheduling?
}{
	Scheduling where a process can run for some fixed maximum time, once it ahs reached its maximum time, it is interrupted and set `ready' and the scheduler runs the next process.
}

\card{
	What is the fixed time amount called in non-pre-emptive processing?
}{
	The `time-slice' or `time-quantum'.
}

\card{
	Briefly explain the shortest remaining time first scheduling algorithm.
}{
	For each newly ready process, if CPU-burst is less than the time to complete the running process then context-switch and run the new process.
}

\card{
	What is process starvation?
}{
	When the scheduling algorithm leaves a process out for a long time, causing the process to not receive any CPU time.
}

\card{
	In scheduling, what are static priorities?
}{
	Priorities that are predetermined for each process.
}

\card{
	In scheduling, what are dynamic priorities?
}{
	Priorities that are assigned by the system to achieve certain goals.
}

\end{document} 
