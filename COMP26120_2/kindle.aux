\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\@writefile{toc}{\contentsline {section}{\numberline {1}Keys and total orders}{}{section.1}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Trees}{}{section.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Definition}{}{subsection.2.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}Tree algorithms}{}{subsection.2.2}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.2.1}Depth of a node}{}{subsubsection.2.2.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3}Height of a tree}{}{subsection.2.3}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.3.1}Tree traversal}{}{subsubsection.2.3.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4}Tree datastructures}{}{subsection.2.4}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.4.1}Using a vector based datastructure for trees}{}{subsubsection.2.4.1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.4.2}Using linked nodes to form a tree datastructure}{}{subsubsection.2.4.2}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Priority Queues}{}{section.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Heaps}{}{subsection.3.1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.1.1}Insertion}{}{subsubsection.3.1.1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.1.2}Removal}{}{subsubsection.3.1.2}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.1.3}Heap sort}{}{subsubsection.3.1.3}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Dictionaries and Hash Tables}{}{section.4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1}Collision handling}{}{subsection.4.1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.1.1}Probing}{}{subsubsection.4.1.1}}
\@writefile{toc}{\contentsline {section}{\numberline {5}Ordered Dictionaries}{}{section.5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1}Lookup tables}{}{subsection.5.1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {5.1.1}Binary Search}{}{subsubsection.5.1.1}}
\@writefile{toc}{\contentsline {section}{\numberline {6}Binary Trees}{}{section.6}}
\@writefile{toc}{\contentsline {subsection}{\numberline {6.1}AVL Trees}{}{subsection.6.1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {6.1.1}AVL tree insertion}{}{subsubsection.6.1.1}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces You can see the correct choices of $z$, $y$ and $x$ when searching an AVL tree after an insert}}{}{figure.1}}
\newlabel{avl-tree-stage-1}{{1}{}{You can see the correct choices of $z$, $y$ and $x$ when searching an AVL tree after an insert}{figure.1}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {6.1.2}AVL tree removal}{}{subsubsection.6.1.2}}
\@writefile{toc}{\contentsline {section}{\numberline {7}Problem solving}{}{section.7}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1}Divide and Conquer}{}{subsection.7.1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.1}D\&C Example}{}{subsubsection.7.1.1}}
\newlabel{easy-soln}{{7.1.1}{}{D\&C Example}{subsubsection.7.1.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Solving the largest/smallest integer problem is easy to do, even in $O(n)$ time.}}{}{figure.2}}
\newlabel{d-and-c-soln}{{7.1.1}{}{D\&C Example}{figure.2}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces We can also solve the largest/smallest integer problem using divide and conquer.}}{}{figure.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.2}Greedy method}{}{subsection.7.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.3}Dynamic programming}{}{subsection.7.3}}
\@writefile{toc}{\contentsline {section}{\numberline {8}Misc figures}{}{section.8}}
\newlabel{greedy}{{8}{}{Misc figures}{section.8}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces An implementation of the greedy money counter.}}{}{figure.4}}
\gdef\minted@oldcachelist{,
  default.pygstyle,
  C8D4496E36B7EC8176F7AF9357A3BCAC3328021C1D19B5106FD0C2D8E9AD5DD9.pygtex,
  3B1CCC4128920712E8086282C0D9B4563328021C1D19B5106FD0C2D8E9AD5DD9.pygtex,
  6EA9BBB31A38900BC2331A62BD656A2E9BD30232B287D71EB8CA9B5AAA1FC75D.pygtex,
  E89F3FE0E1B51AA22BAE25D5E226151B9BD30232B287D71EB8CA9B5AAA1FC75D.pygtex,
  F33A84CC616B345F8940F38C1EC4A6143328021C1D19B5106FD0C2D8E9AD5DD9.pygtex,
  D2A3DDE15855F755FF3ADBCF09BEDB713328021C1D19B5106FD0C2D8E9AD5DD9.pygtex,
  20B0C2D5961428E8DE08C52DE6EE55AB3328021C1D19B5106FD0C2D8E9AD5DD9.pygtex,
  DF776C159D2C61AC2A2F0357B0F7345C3328021C1D19B5106FD0C2D8E9AD5DD9.pygtex,
  E388299B79CC64A5727D8F7A5215150433260447753C79C223FE91C0F81373C6.pygtex,
  574ADA11CCC921BC9959272A7CC5989CCCC99B987C9EBCC1419B44D5D65DF531.pygtex,
  F488E048845DC68BE5F638FADE1BDCB5D7F15EF4AA9F05622E6519D418F496E7.pygtex}
